export interface FaroSourceMapUploaderPluginOptions {
    endpoint: string;
    appName: string;
    appId: string;
    apiKey: string;
    stackId: string;
    outputPath?: string;
    outputFiles?: string[] | RegExp;
    bundleId?: string;
    keepSourcemaps?: boolean;
    gzipContents?: boolean;
    verbose?: boolean;
    skipUpload?: boolean;
    maxUploadSize?: number;
    recursive?: boolean;
}
interface UploadSourceMapOptions {
    sourcemapEndpoint: string;
    apiKey: string;
    stackId: string;
    filePath: string;
    filename: string;
    keepSourcemaps: boolean;
    verbose?: boolean;
}
interface UploadCompressedSourceMapsOptions {
    sourcemapEndpoint: string;
    apiKey: string;
    stackId: string;
    outputPath: string;
    files: string[];
    keepSourcemaps: boolean;
    verbose?: boolean;
}
export declare const uploadSourceMap: (options: UploadSourceMapOptions) => Promise<boolean>;
export declare const uploadCompressedSourceMaps: (options: UploadCompressedSourceMapsOptions) => Promise<boolean>;
export declare const shouldProcessFile: (filename: string, outputFiles: string[] | RegExp | undefined) => boolean;
export declare const faroBundleIdSnippet: (bundleId: string, appName: string) => string;
export declare function randomString(length?: number): string;
export declare const consoleInfoOrange: (message: string) => void;
export declare const WEBPACK_PLUGIN_NAME = "FaroSourceMapUploaderPlugin";
export declare const ROLLUP_PLUGIN_NAME = "rollup-plugin-faro-source-map-uploader";
export declare const THIRTY_MB_IN_BYTES: number;
export declare const JS_SOURCEMAP_PATTERN: RegExp;
export declare const cleanAppName: (appName: string) => string;
/**
 * Exports the bundleId to an environment variable file for use in the CLI
 * @param bundleId The bundleId to export
 * @param appName The name of the app
 * @param verbose Whether to log the export
 */
export declare const exportBundleIdToFile: (bundleId: string, appName: string, verbose?: boolean) => void;
export {};
