{"version":3,"file":"FaroProfiler.js","sourceRoot":"","sources":["../../../src/profiler/FaroProfiler.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { Attributes, Span, Tracer } from '@opentelemetry/api';\nimport { Component } from 'react';\nimport type { ReactNode } from 'react';\n\nimport { VERSION } from '@grafana/faro-web-sdk';\nimport type { OTELApi } from '@grafana/faro-web-sdk';\n\nimport { api, internalLogger } from '../dependencies';\n\nexport interface FaroProfilerProps {\n  children: ReactNode;\n  name: string;\n  updateProps: Record<string, unknown>;\n}\n\nexport class FaroProfiler extends Component<FaroProfilerProps> {\n  protected mountSpan: Span | undefined = undefined;\n  protected mountSpanEndTime: number | undefined = undefined;\n  protected updateSpan: Span | undefined = undefined;\n\n  private get isOtelInitialized(): boolean {\n    return !!api?.isOTELInitialized();\n  }\n\n  private get otel(): OTELApi | undefined {\n    return api?.getOTEL()!;\n  }\n\n  private get tracer(): Tracer {\n    return this.otel?.trace.getTracer('@grafana/faro-react', VERSION)!;\n  }\n\n  private createSpan(\n    spanName: string,\n    options?: { startTime?: number; endTime?: number; attributes?: Attributes }\n  ): Span {\n    const span = this.tracer.startSpan(spanName, {\n      startTime: options?.startTime,\n      attributes: {\n        'react.component.name': this.props.name,\n        ...(options?.attributes ?? {}),\n      },\n    });\n\n    this.otel?.trace.setSpan(this.otel.context.active(), span);\n\n    if (options?.endTime) {\n      span.end(options.endTime);\n    }\n\n    return span;\n  }\n\n  private createChildSpan(\n    spanName: string,\n    parent: Span,\n    options?: { startTime?: number; endTime?: number; attributes?: Attributes }\n  ): Span {\n    let span: Span;\n\n    this.otel?.context.with(this.otel.trace.setSpan(this.otel.context.active(), parent), () => {\n      span = this.createSpan(spanName, options);\n    });\n\n    return span!;\n  }\n\n  constructor(props: FaroProfilerProps) {\n    super(props);\n\n    if (this.isOtelInitialized) {\n      this.mountSpan = this.createSpan('componentMount');\n    } else {\n      internalLogger?.error(\n        'The Faro React Profiler requires tracing instrumentation. Please enable it in the \"instrumentations\" section of your config.'\n      );\n    }\n  }\n\n  override componentDidMount(): void {\n    if (this.isOtelInitialized && this.mountSpan) {\n      this.mountSpanEndTime = Date.now();\n      this.mountSpan.end(this.mountSpanEndTime);\n    }\n  }\n\n  override shouldComponentUpdate({ updateProps }: FaroProfilerProps): boolean {\n    if (this.isOtelInitialized && this.mountSpan && updateProps !== this.props.updateProps) {\n      const changedProps = Object.keys(updateProps).filter((key) => updateProps[key] !== this.props.updateProps[key]);\n\n      if (changedProps.length > 0) {\n        this.updateSpan = this.createChildSpan('componentUpdate', this.mountSpan, {\n          attributes: {\n            'react.component.changed_props': changedProps,\n          },\n        });\n      }\n    }\n\n    return true;\n  }\n\n  override componentDidUpdate(): void {\n    if (this.isOtelInitialized && this.updateSpan) {\n      this.updateSpan.end();\n      this.updateSpan = undefined;\n    }\n  }\n\n  override componentWillUnmount(): void {\n    if (this.isOtelInitialized && this.mountSpan) {\n      this.createChildSpan('componentRender', this.mountSpan, {\n        startTime: this.mountSpanEndTime,\n        endTime: Date.now(),\n      });\n    }\n  }\n\n  override render(): ReactNode {\n    return this.props.children;\n  }\n}\n"]}