"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FaroRoutes = FaroRoutes;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var faro_web_sdk_1 = require("@grafana/faro-web-sdk");
var dependencies_1 = require("../../dependencies");
var types_1 = require("../types");
var routerDependencies_1 = require("./routerDependencies");
var utils_1 = require("./utils");
function FaroRoutes(props) {
    var _a;
    var location = routerDependencies_1.useLocation === null || routerDependencies_1.useLocation === void 0 ? void 0 : (0, routerDependencies_1.useLocation)();
    var navigationType = routerDependencies_1.useNavigationType === null || routerDependencies_1.useNavigationType === void 0 ? void 0 : (0, routerDependencies_1.useNavigationType)();
    var routes = (0, react_1.useMemo)(function () { var _a; return (_a = routerDependencies_1.createRoutesFromChildren === null || routerDependencies_1.createRoutesFromChildren === void 0 ? void 0 : (0, routerDependencies_1.createRoutesFromChildren)(props.children)) !== null && _a !== void 0 ? _a : []; }, [props.children]);
    var lastRouteRef = (0, react_1.useRef)({});
    (0, react_1.useEffect)(function () {
        var _a, _b;
        if (routerDependencies_1.isInitialized && (navigationType === types_1.NavigationType.Push || navigationType === types_1.NavigationType.Pop)) {
            var route = (0, utils_1.getRouteFromLocation)(routes, location);
            var url = (_a = faro_web_sdk_1.globalObject.location) === null || _a === void 0 ? void 0 : _a.href;
            dependencies_1.api.pushEvent(faro_web_sdk_1.EVENT_ROUTE_CHANGE, __assign({ toRoute: route, toUrl: (_b = faro_web_sdk_1.globalObject.location) === null || _b === void 0 ? void 0 : _b.href }, lastRouteRef.current));
            lastRouteRef.current = {
                fromRoute: route,
                fromUrl: url,
            };
        }
    }, [location, navigationType, routes]);
    var ActualRoutes = (_a = props.routesComponent) !== null && _a !== void 0 ? _a : routerDependencies_1.Routes;
    return (0, jsx_runtime_1.jsx)(ActualRoutes, __assign({}, props));
}
//# sourceMappingURL=FaroRoutes.js.map